@page "/"

@using System.Globalization
@using MauiApp1.Data
@using System.Drawing
@using System.Diagnostics
@using Microsoft.Maui.Graphics

@inject IJSRuntime JSRuntime
@inject MainViewModel MainViewModel;

<h3>Movement</h3>

<div>OverChild: @MainViewModel.OverChild</div>

<div>Cursor Position: @MainViewModel.ContainerMouseX,@MainViewModel.ContainerMouseY</div>

<div>Element Id:
    @if (MainViewModel.SelectedItem != null) 
    { @MainViewModel.SelectedItem.Id <span> Element Position:</span>  @MainViewModel.SelectedItem.X <span>,</span>@MainViewModel.SelectedItem.Y } 
    else 
    { <span>none</span> }
</div>

<div class="MainSVG" style="background-color: lightblue; width: @(Width + "px");height:@(Height + "px");position: relative;overflow:auto; overflow-y: hidden;overflow-x: hidden;"
    @onmousemove="@MouseMove">
    @foreach (var r in MainViewModel.CanvasElements)
    {
        @if(r is CanvasContent y)
        {
            <BannerComponent ContentUrl="@(y.ContentUrl)" DataContext="@r"/>
        }
         @if(r is CanvasMultiContent yi)
        {
            <BSliderComponent ContentUrls="@(yi.ContentUrls)" DataContext="@r"/>
        }
    }
</div>

@code
{
    public int Height { get; set; } = 1000;
    public int Width { get; set; } = 1000;

    public void MouseMove(MouseEventArgs e)
    {
        MainViewModel.ContainerMouseX = (int)e.ClientX - MainViewModel.ContainerX;
        MainViewModel.ContainerMouseY = (int)e.ClientY - MainViewModel.ContainerY;

        if(MainViewModel.SelectedItem != null)
        {
            var r = MainViewModel.SelectedItem;
            var x = MainViewModel.ContainerMouseX - r.OriginalX;
            var y = MainViewModel.ContainerMouseY - r.OriginalY;

            var intersections = MainViewModel.CanvasElements
                .Where(x => x.Id != r.Id)
                .Where(a => 
                    new Rect(a.X, a.Y, a.Width, a.Height)
                    .IntersectsWith(new Rect(r.X, r.Y, r.Width, r.Height)));

            Debug.WriteLine($"Intersects with: {intersections.Count()} components.");

            if (x < 0)
                x = 0;
            if (x > Width - r.Width)
                x = Width - r.Width;
            if (y < 0)
                y = 0;
            if (y > Height - r.Height)
                y = Height - r.Height;

            r.X = x;
            r.Y = y;
        }
    }

    public async void ChangeSelected(string newselected)
    {
        //Set an SVG <g> Element over Top in the <svg>
         //method contained in _Host.cshtml
        await JSRuntime.InvokeAsync<string>("PlaceOnTop", new object[] { newselected });
        base.StateHasChanged();
    }

    //This is called after OnInitialized
    protected override async void OnAfterRender(bool firstRender)
    {
        if(firstRender)
        {
            //Get SVG Position and Pass to the ViewModel 
            //method contained in _Host.cshtml
            var raw = await JSRuntime.InvokeAsync<decimal[]>("ContainerPos", null);
            MainViewModel.ContainerX = (int)raw[0];
            MainViewModel.ContainerY = (int)raw[1];
        }
        base.OnAfterRender(firstRender);
    }
}